#!/usr/bin/php
<?php
/*******************************************************************************
 *
 * $Id: import_from_dci_sn 79676 2013-10-08 20:09:32Z rcallaha $
 * $Date: 2013-10-08 16:09:32 -0400 (Tue, 08 Oct 2013) $
 * $Author: rcallaha $
 * $Revision: 79676 $
 * $HeadURL: https://svn.ultradns.net/svn/sts_tools/acdc/trunk/bin/import_from_dci_sn $
 *
 *******************************************************************************
 */

chdir(__DIR__);

include __DIR__ . "/../config/global.php";

use STS\CMDB\CMDBCI;
use STS\CMDB\CMDBCITable;

use STS\CMDB\CMDBRackTable;
use STS\CMDB\CMDBLocationTable;

use STS\CMDB\CMDBServerTable;
use STS\CMDB\CMDBStorageDeviceTable;
use STS\CMDB\CMDBSANSwitchTable;
use STS\CMDB\CMDBNetworkDeviceTable;

use STS\HPSIM\HPSIMChassisTable;
use STS\HPSIM\HPSIMBladeTable;

use STS\Util\SysLog;

try {
    // read the config file
    $config = $GLOBALS['config'];

    // get the command line options
    $options = parseOptions();

    // initialize syslog
    $sysLog = new SysLog($config->appName);
    $sysLog->setLogLevel(STS\Util\SysLog::DEBUG);

    // check to see if we should run
    if (!$config->runCronJobs && !$options->forceRun) {
        print "runCronJobs is set to false in the config file. Exiting...\n";
        exit;
    }

    /*********************************************************************/
    /******************** Log Files & Headers ****************************/
    /*********************************************************************/

    // general definitions
    $title      = "ACDC: Import from DCI";
    $scriptName = $argv[0];
    $now        = date("Y-m-d-H-i");
    $startTime  = time();

    $optsNameWidth    = 25;
    $summaryNameWidth = 30;

    // open the log file; also keep a log string to send in email if exception is thrown
    $logString  = "";
    $logFile    = "{$config->logDir}/{$config->dciImportLogFileName}.{$now}";
    $logFilePtr = fopen($logFile, "w");

    $release = trim(file_get_contents("../ABOUT"));

    $logHeader = "{$title} Log\n" .
        "\n" .
        "Release:    {$release}\n" .
        "Host:       " . gethostname() . "\n" .
        "SN Site:    {$config->servicenow->site}\n" .
        "Script:     " . implode(' ', $argv) . "\n" .
        "Start Time: " . date("Y-m-d H:i:s", $startTime) . "\n" .
        "\n" .
        "Options: \n" .
        sprintf("\t %-{$optsNameWidth}s = %s\n", "StdOut", $options->stdOut ? "true" : "false") .
        sprintf("\t %-{$optsNameWidth}s = %s\n", "Update", $options->update ? "true" : "false") .
        sprintf("\t %-{$optsNameWidth}s = %s\n", "Force Run", $options->forceRun ? "true" : "false") .
        sprintf("\t %-{$optsNameWidth}s = %s\n", "Use Local", $options->useLocal ? "true" : "false") .
        sprintf("\t %-{$optsNameWidth}s = %s\n", "Target Host", $options->targetHost ? $options->targetHost : "N/A") .
        sprintf("\t %-{$optsNameWidth}s = %s\n", "Cabinet Name", $options->cabinetName ? $options->cabinetName : "N/A") .
        sprintf("\t %-{$optsNameWidth}s = %s\n", "Location Name", $options->locationName ? $options->locationName : "N/A") .
        sprintf("\t %-{$optsNameWidth}s = %s\n", "Line Number", $options->lineNumber ? $options->lineNumber : "N/A") .
        "\n";
    outlog($logHeader);


    // prune old log files
    outlog("Cleaning up old log files...\n");
    $logFiles        = explode("\n", `ls -t $config->logDir/$config->dciImportLogFileName.*`);
    $todayMinusPrune = $startTime - (60 * 60 * 24 * $config->pruneAfter);
    $todayMinus1     = $startTime - (60 * 60 * 24 * 1);
    for ($i = 0; $i < count($logFiles); $i++) {
        $f = $logFiles[$i];
        if ($f === "") {
            break;
        }

        $stat  = stat($f);
        $mTime = $stat[9];
        if ($mTime < $todayMinusPrune) {
            // log file is older than 7 days; delete
            outlog("\tPruning {$f} - " . date("Y-m-d H:i:s", $mTime) . "\n");
            unlink($f);
        } else if ($config->compressLogs && !preg_match("/.*\.gz$/", $f) && $mTime < $todayMinus1) {
            // log file is older than 1 day; compress
            outlog("\tCompressing {$f} - " . date("Y-m-d H:i:s", $mTime) . "\n");
            $out = `gzip $f`;
        }
    }
    outlog("\n");

    /*********************************************************************/
    /************************* Initialization ****************************/
    /*********************************************************************/

    // base cmdb query
    $baseQuery = "^sys_class_name!=cmdb_ci_network_adapter" .
        "^sys_class_name!=u_subsystem";

    // hashes of items not found
    $assetsNF       = array();
    $locationsNF    = array();
    $racksNF        = array();
    $assetsDecommed = array();

    // init summary stats
    $summary = (object)array(
        "numDciHosts"      => 0,
        "numFound"         => 0,
        "numNotFound"      => 0,
        "numMultiple"      => 0,
        "missingLoc"       => 0,
        "missingRack"      => 0,
        "missingElev"      => 0,
        "missingRUs"       => 0,
        "locNotFound"      => 0,
        "rackNotFound"     => 0,
        "locUpdated"       => 0,
        "rackUpdated"      => 0,
        "elevationUpdated" => 0,
        "rackUnitsUpdated" => 0,
        "bladesUpdated"    => 0
    );

    // instantiate the needed data access objects
    $dciAssetTable   = new DCIAssetTable();
    $dciHistoryTable = new DCIHistoryTable();

    $assetTable    = new AssetTable();
    $cabinetTable  = new CabinetTable();
    $locationTable = new LocationTable();

    $cmdbLocationTable = new CMDBLocationTable();
    $cmdbRackTable     = new CMDBRackTable();

    $cmdbCiTable            = new CMDBCITable();
    $cmdbServerTable        = new CMDBServerTable();
    $cmdbStorageTable       = new CMDBStorageDeviceTable();
    $cmdbSanSwitchTable     = new CMDBSanSwitchTable();
    $cmdbNetworkDeviceTable = new CMDBNetworkDeviceTable();

    $hpsimChassisTable = new HPSIMChassisTable();
    $hpsimBladeTable   = new HPSIMBladeTable();

    /*********************************************************************/
    /**************************** Main ***********************************/
    /*********************************************************************/

    if (!$options->useLocal) {
        // get a list of hosts from the DCI production database
        outlog("Getting a list of DCI assets...\n");
        $dciAssetHash = $dciAssetTable->getAllHashByHostName($options->locationName);
        outlog("\t" . count($dciAssetHash) . " assets found\n");

        $dciAssets = array();
        foreach ($dciAssetHash as $asset) {
            $dciAssets[] = $asset;
        }

        outlog("Writing local cache file...\n");
        file_put_contents($config->dataDir . "/dci_hosts.ser", serialize($dciAssets));
        file_put_contents($config->dataDir . "/dci_hosts_hash.ser", serialize($dciAssetHash));
    } else {
        outlog("Reading from local cache file...\n");
    }

    $dciAssets            = unserialize(file_get_contents($config->dataDir . "/dci_hosts.ser"));
    $dciAssetHash         = unserialize(file_get_contents($config->dataDir . "/dci_hosts_hash.ser"));
    $numDciAssets         = count($dciAssets);
    $summary->numDciHosts = $numDciAssets;
    outlog("\nTotal DCI Assets: " . $numDciAssets . "\n\n");

    // open the file that logs multiple matches found in CMDB
    $fdMultiple = fopen($config->logDir . "/" . $config->multipleMatchesFileName . "." . $now, "w");
    fwrite($fdMultiple, sprintf("%-20s %-20s %-20s %-20s %-20s %-10s\n", "Hostname", "Serial Num", "Asset Num", "Model", "Location", "Rack"));

    // loop thru each
    $i = 0;
    for ($i = 0; $i < $numDciAssets; $i++) {
        /** @var DCIAsset $dciAsset */
        $dciAsset = $dciAssets[$i];

        // initialize changes array for call to CMDB update
        $changes  = array();
        $location = null;
        $cabinet  = null;
        $asset    = null;

        if ($options->targetHost && $dciAsset->getHostName() != $options->targetHost) {
            continue;
        } else if ($options->cabinetName && $dciAsset->getRack() != $options->cabinetName) {
            continue;
        } else if (!preg_match("/" . $options->locationName . "/", $dciAsset->getLocation())) {
            continue;
        } else if ($options->lineNumber && $i + 1 < $options->lineNumber) {
            continue;
        }

        outlog(sprintf("[%4d of %4d] %-20s", $i + 1, $numDciAssets, $dciAsset->getHostName()));

        $ci      = new CMDBCI();
        $foundBy = "";

        if ($ci->getSysId() == "" && $dciAsset->getSerialNumber() != "") {
            $query   = "serial_number=" . $dciAsset->getSerialNumber() . $baseQuery;
            $results = $cmdbCiTable->getByQueryString($query);
            if (count($results) == 1) {
                $ci      = $results[0];
                $foundBy = "SN";
            } else if (count($results) > 1) {
                for ($j = 0; $j < count($results); $j++) {
                    $ci = $results[$j];
                    if ($ci->getInstallStatus() == "Decommissioned") {
                        unset($results[$j]);
                        $results = array_splice($results, $j, 1);
                        $j--;
                    }
                }
                if (count($results) > 1) {
                    outlog("     Multiple entries\n");
                    $summary->numMultiple++;
                    fwrite($fdMultiple, sprintf("%-20s %-20s %-20s %-20s %-20s %-10s\n", $dciAsset->getHostName(), $dciAsset->getSerialNumber(), $dciAsset->getSerialNumber(),
                        $dciAsset->getModel(), $dciAsset->getLocation(), $dciAsset->getRack()));
                    continue;
                }
                $foundBy = "SN";
                $ci      = $results[0];
            }
        }

        if ($ci->getSysId() == "" && $dciAsset->getAssetNumber() != "") {
            $query   = "u_asset_id=" . $dciAsset->getAssetNumber() . $baseQuery;
            $results = $cmdbCiTable->getByQueryString($query);
            if (count($results) == 1) {
                $ci      = $results[0];
                $foundBy = "AN";
            } else if (count($results) > 1) {
                for ($j = 0; $j < count($results); $j++) {
                    $ci = $results[$j];
                    if ($ci->getInstallStatus() == "Decommissioned") {
                        unset($results[$j]);
                        $results = array_splice($results, $j, 1);
                        $j--;
                    }
                }
                if (count($results) > 1) {
                    outlog("     Multiple entries\n");
                    $summary->numMultiple++;
                    fwrite($fdMultiple, sprintf("%-20s %-20s %-20s %-20s %-20s %-10s\n", $dciAsset->getHostName(), $dciAsset->getSerialNumber(), $dciAsset->getSerialNumber(),
                        $dciAsset->getModel(), $dciAsset->getLocation(), $dciAsset->getRack()));
                    continue;
                }
                $foundBy = "AN";
                $ci      = $results[0];
            }
        }

        if ($ci->getSysId() == "") {
            $summary->numNotFound++;
            outlog("     NOT FOUND - ");
            $assetsNF[$dciAsset->getHostName()] = $dciAsset;

            // go ahead and save to our local DB even though it was not found in CMDB
            // we'll indicate this on the UI
            $cabinet = $cabinetTable->getByName($dciAsset->getRack());
            if ($cabinet->getId() == "") {
                $locations = $locationTable->getByNameLike($dciAsset->getLocation());
                if (count($locations) > 1) {
                    outlog("MULTIPLE MATCHES TO LOCATION\n");
                    // loop to the next DCI asset
                    continue;
                }
                $location = $locations[0];
                if ($location->getId() == "") {
                    outlog("LOCATION NOT FOUND\n");
                    // loop to the next DCI asset
                    continue;
                }
                $cabinet->setLocationId($location->getId());
                $cabinet->setName($dciAsset->getRack());
                $cabinet->setCabinetTypeId(1);
                $cabinet->setX(50);
                $cabinet->setY(50);
                $cabinet = $cabinetTable->create($cabinet);
            }

            // get the corresponding asset in the local db
            $results = $assetTable->getByNameLike($dciAsset->getHostName());
            if (count($results) > 1) {
                outlog("Multiple matches in local DB\n");
                continue;
            }
            if (count($results) == 1) {
                $asset = $results[0];
            } else {
                $asset = new Asset();
            }
            $asset->setCabinetId($cabinet->getId())
                ->setSysId(null)
                ->setSysClassName(null)
                ->setName($dciAsset->getHostName())
                ->setManufacturer(null)
                ->setModel($dciAsset->getModel())
                ->setSerialNumber($dciAsset->getSerialNumber())
                ->setAssetTag($dciAsset->getAssetNumber())
                ->setElevation($dciAsset->getElevation())
                ->setNumRUs($dciAsset->getNumberOfRackUnits());

            if (!$asset->getId()) {
                outlog("CREATE\n");
                $asset = $assetTable->create($asset);
            } else {
                outlog("UPDATE\n");
                $assetTable->update($asset);
            }
            continue;
        } // DCI asset has been found in CMDB
        else {
            if ($ci->getInstallStatus() == "Decommissioned") {
                outlog(sprintf("(%2s) %-35s %-25s ", $foundBy, $ci->getName() . "*D", $ci->getSysClassName()));
                $assetsDecommed[$ci->getName()] = $ci;
            } else {
                outlog(sprintf("(%2s) %-35s %-25s ", $foundBy, $ci->getName(), $ci->getSysClassName()));
            }
            $summary->numFound++;

            // asset has been found. determine the class so that we get define the model and perform an update later
            $cmdbCI = null;
            $table  = "";
            switch ($ci->getSysClassName()) {
                case "cmdb_ci_server":
                    $cmdbCI = $cmdbServerTable->getById($ci->getSysId());
                    $table  = "server";
                    break;
                case "cmdb_ci_msd":
                    $cmdbCI = $cmdbStorageTable->getById($ci->getSysId());
                    $table  = "sanStorage";
                    break;
                case "u_san_switches_storage":
                    $cmdbCI = $cmdbSanSwitchTable->getById($ci->getSysId());
                    $table  = "sanSwitch";
                    break;
                case "cmdb_ci_netgear":
                    $cmdbCI = $cmdbNetworkDeviceTable->getById($ci->getSysId());
                    $table  = "networkDevice";
                    break;
                default:
                    outlog("     UNKNOWN CLASS\n");
                    $summary->numNotFound++;
                    // loop back to the next DCI asset
                    continue;
            }
            if (!$cmdbCI) continue;

            $cmdbCI->setName(strtolower($cmdbCI->getName()));

            // correct location between DCI and CMDB
            if ($dciAsset->getLocation() == "Sterling") {
                $dciAsset->setLocation("Sterling-VA-NSR-B8");
            } else if ($dciAsset->getLocation() == "Charlotte") {
                $dciAsset->setLocation("Charlotte-NC-CLT-1");
            } else if ($dciAsset->getLocation() == "Charlotte CLT-1") {
                $dciAsset->setLocation("Charlotte-NC-CLT-1");
            } else if ($dciAsset->getLocation() == "Charlotte CLT-3") {
                $dciAsset->setLocation("Charlotte-NC-CLT-3");
            } else if ($dciAsset->getLocation() == "Ashburn EQABDC2") {
                $dciAsset->setLocation("Ashburn-VA-EQIX-DC2");
            }

            // I have no idea why I needed to add the following PHPDoc Helper. Very strange
            /** @var DCIAsset $dciAsset */

            outlog(sprintf("LOC: %-25s -> %-25s", $cmdbCI->getLocation() ? $cmdbCI->getLocation() : "-", $dciAsset->getLocation() ? $dciAsset->getLocation() : "-"));

            $cmdbLocation = null;
            $location     = null;
            if ($dciAsset->getLocation() != "") {
                $cmdbLocation = $cmdbLocationTable->getByName($dciAsset->getLocation());
                if ($cmdbLocation->getSysId() == "") {
                    outlog(sprintf("%-5s %-10s", "NF", ""));
                    if (!array_key_exists($dciAsset->getLocation(), $locationsNF)) {
                        $locationsNF[$dciAsset->getLocation()] = 0;
                        $summary->locNotFound++;
                    }
                    $locationsNF[$dciAsset->getLocation()]++;
                } else {
                    if ($cmdbCI->getLocation() == "" || strlen($cmdbCI->getLocationId()) != 32 || $cmdbCI->getLocation() != $dciAsset->getLocation()) {
                        outlog(sprintf("%-5s %-10s", "OK", "[UPDATE]"));
                        $changes['location'] = $cmdbLocation->getSysId();
                        $summary->locUpdated++;
                    } else {
                        outlog(sprintf("%-5s %-10s", "OK", "[NO CHG]"));
                    }

                    // check for location in local db
                    $location = $locationTable->getByName($cmdbLocation->getName())
                        ->setSysId($cmdbLocation->getSysId())
                        ->setName($cmdbLocation->getName())
                        ->setStreet($cmdbLocation->getStreet())
                        ->setCity($cmdbLocation->getCity())
                        ->setState($cmdbLocation->getState())
                        ->setZip($cmdbLocation->getZip());
                    if (!$location->getId()) {
                        $location = $locationTable->create($location);
                    } else {
                        $locationTable->update($location);
                    }
                }
            } else {
                $summary->missingLoc++;
            }

            // check for rack existing and differences for update
            outlog(sprintf("RACK: %-10s -> %-10s", $cmdbCI->getRack() ? $cmdbCI->getRack() : "-", $dciAsset->getRack() ? $dciAsset->getRack() : "-"));
            $cmdbRack = null;
            if ($cmdbLocation && $cmdbLocation->getSysId() && $dciAsset->getRack() != "") {
                // in some cases, there are multiple racks with the same name. Usually on the order of "A01" and "a01".
                // most should have been cleaned up by now, but one never knows.
                // I'm going to get the most recenly updated rack by location id
                $cmdbRack = $cmdbRackTable->getMostRecentByNameAndLocationId($dciAsset->getRack(), $cmdbLocation->getSysId());
                if ($cmdbRack->getSysId() == "") {
                    $cmdbRack = new \STS\CMDB\CMDBRack();
                    $cmdbRack->setName($dciAsset->getRack())
                        ->setLocationId($cmdbLocation->getSysId());
                    $cmdbRack = $cmdbRackTable->create($cmdbRack);

                    /*
					outlog(sprintf("%-5s %-10s", "NF", ""));
					if (!array_key_exists($dciAsset->getRack(), $racksNF)) {
						$racksNF[$dciAsset->getRack()] = (object) array(
							"locationName" => $cmdbLocation->getName(),
							"numAssets" => 0
						);
						$summary->rackNotFound++;
					}
					$racksNF[$dciAsset->getRack()]->numAssets++;

					// set default values for cmdbRack so we can update our asset even though we won't update the CMDB since the rack was not found
					$cmdbRack->setName($dciAsset->getRack());
					$cmdbRack->setSysId('');

					// get the corresponding cabinet from the local db
					$cabinet = $cabinetTable->getByName($dciAsset->getRack());
                    $cabinetSource = "DCI";
                    */
                }
                if ($cmdbCI->getRackId() == "" || strlen($cmdbCI->getRackId()) != 32 || $cmdbCI->getRack() != $dciAsset->getRack()) {
                    outlog(sprintf("%-5s %-10s", "OK", "[UPDATE]"));
                    $changes['u_rack'] = $cmdbRack->getSysId();
                    $summary->rackUpdated++;
                } else {
                    outlog(sprintf("%-5s %-10s", "OK", "[NO CHG]"));
                }
                // get the corresponding cabinet from the local db
                $cabinet       = $cabinetTable->getByName($cmdbRack->getName());
                $cabinetSource = "CMDB";

                if ($cabinet->getId() == "") {
                    $cabinet->setLocationId($location->getId())
                        ->setName($cmdbRack->getName())
                        ->setCabinetTypeId(1)
                        ->setSysId($cmdbRack->getSysId())
                        ->setX(50)
                        ->setY(50);
                    $cabinet = $cabinetTable->create($cabinet);
                } else {
                    $cabinet->setLocationId($location->getId())
                        ->setName($cmdbRack->getName())
                        ->setSysId($cmdbRack->getSysId());
                    $cabinetTable->update($cabinet);
                }

                // get the corresponding asset in the local db
                $asset = $assetTable->getBySysId($cmdbCI->getSysId());
                if (!$asset->getId()) {
                    $asset = $assetTable->getByName($cmdbCI->getName());
                }

                $asset->setCabinetId($cabinet->getId())
                    ->setSysId($cmdbCI->getSysId())
                    ->setSysClassName($cmdbCI->getSysClassName())
                    ->setName($cmdbCI->getName())
                    ->setManufacturer($cmdbCI->getManufacturer())
                    ->setModel($cmdbCI->getModelNumber())
                    ->setSerialNumber($cmdbCI->getSerialNumber())
                    ->setAssetTag($cmdbCI->getAssetTag())
                    ->setElevation($dciAsset->getElevation())
                    ->setStatus($cmdbCI->getInstallStatus());

                if (!$asset->getId()) {
                    $asset->setNumRUs($dciAsset->getNumberOfRackUnits());
                    $asset = $assetTable->create($asset);
                } else {
                    if ($asset->getNumRUs() != 44) $asset->setNumRUs($dciAsset->getNumberOfRackUnits());
                    $assetTable->update($asset);
                }
            } else {
                outlog(sprintf("%-5s %-10s", "-", "[NO CHG]"));
            }
            if ($dciAsset->getRack() == "") {
                $summary->missingRack++;
            }

            // check elevation
            outlog(sprintf("POS: %3d -> %3d ", $cmdbCI->getRackPosition(), $dciAsset->getElevation()));
            if ($dciAsset->getElevation() != "" && $cmdbCI->getRackPosition() != $dciAsset->getElevation()) {
                $changes['u_rack_position'] = $dciAsset->getElevation();

                outlog(sprintf("%-10s", "[UPDATE]"));
                $summary->elevationUpdated++;
            } else {
                outlog(sprintf("%-10s", "[NO CHG]"));
            }

            if ($dciAsset->getElevation() == null || $dciAsset->getElevation() == "" || $dciAsset->getElevation() == 0) {
                $summary->missingElev++;
            }

            if ($asset) {
                $asset->setElevation($dciAsset->getElevation());
                $assetTable->update($asset);
            }

            // check number of rack units
            outlog(sprintf("RUs: %3d -> %3d ", $cmdbCI->getNumberOfRackUnits(), $dciAsset->getNumberOfRackUnits()));
            if ($dciAsset->getNumberOfRackUnits() != "" && $cmdbCI->getNumberOfRackUnits() != $dciAsset->getNumberOfRackUnits()) {
                $changes['u_number_rack_units'] = $dciAsset->getNumberOfRackUnits();

                outlog(sprintf("%-10s", "[UPDATE]"));
                $summary->rackUnitsUpdated++;
            } else {
                outlog(sprintf("%-10s", "[NO CHG]"));
            }

            if ($dciAsset->getNumberOfRackUnits() == null || $dciAsset->getNumberOfRackUnits() == "" || $dciAsset->getNumberOfRackUnits() == 0) {
                $summary->missingRUs++;
            }

            if ($asset) {
                $asset->setNumRUs($dciAsset->getNumberOfRackUnits());
                $assetTable->update($asset);
            }

            $json = json_encode($changes);
            if ($options->update) {
                switch ($table) {
                    case "server":
                        $cmdbServerTable->updateByJson($cmdbCI->getSysId(), $json);
                        break;
                    case "networkDevice":
                        $cmdbNetworkDeviceTable->updateByJson($cmdbCI->getSysId(), $json);
                        break;
                    case "sanStorage":
                        $cmdbStorageTable->updateByJson($cmdbCI->getSysId(), $json);
                        break;
                    case "sanSwitch":
                        $cmdbSanSwitchTable->updateByJson($cmdbCI->getSysId(), $json);
                        break;
                    default:
                        outlog("UNKNOWN CLASS");
                        continue;
                }
                $summary->numUpdated++;
            }

            outlog("\n");

            // if this is a blade chassis, get all the associated blades and update their location, rack and elevation
            // to be the same as the chassis
            if ($cmdbCI->getSysClassName() == "cmdb_ci_server" && $cmdbCI->getHostType() == "Blade Chassis") {
                $chassis = $hpsimChassisTable->getBySysId($cmdbCI->getSysId());
                if ($chassis->getId()) {
                    $blades = $hpsimBladeTable->getByChassisId($chassis->getId());
                    for ($b = 0; $b < count($blades); $b++) {
                        $blade = $blades[$b];
                        if ($blade->getSysId()) {
                            $changes = array();
                            if ($cabinetSource == 'CMDB' && $cmdbRack && $cmdbRack->getSysId()) $changes['u_rack'] = $cmdbRack->getSysId();
                            if ($dciAsset->getElevation() != "") $changes['u_rack_position'] = $dciAsset->getElevation();

                            outlog(sprintf("%14s %-20s %3s %s\n", "", "Blade", "", $blade->getCmdbName()));
                            if ($options->update && count($changes) > 0) {
                                $json = json_encode($changes);
                                $cmdbServerTable->updateByJson($blade->getSysId(), $json);
                                $summary->bladesUpdated++;
                            }
                        }
                    }
                }
            }

        }
    }

    fclose($fdMultiple);

    // write out the assets, locations and racks not found to their respective log files
    $fd = fopen($config->logDir . "/" . $config->assetsNFFileName . "." . $now, "w");
    fwrite($fd, sprintf("%-25s %-25s %-20s %-30s %-20s %-10s\n", "Hostname", "Serial Num", "Asset Num", "Model", "Location", "Rack"));
    foreach ($assetsNF as $hostName => $dciAsset) {
        fwrite($fd, sprintf("%-25s %-25s %-20s %-30s %-20s %-10s\n", $dciAsset->getHostName(), $dciAsset->getSerialNumber(), $dciAsset->getAssetNumber(), $dciAsset->getModel(), $dciAsset->getLocation(), $dciAsset->getRack()));
    }
    fclose($fd);

    $fd = fopen($config->logDir . "/" . $config->locationsNFFileName . "." . $now, "w");
    fwrite($fd, sprintf("%-30s %-20s\n", "Location", "Num Assets in this Location"));
    foreach ($locationsNF as $location => $count) {
        fwrite($fd, sprintf("%-30s %20d\n", $location, $count));
    }
    fclose($fd);

    $fd = fopen($config->logDir . "/" . $config->racksNFFileName . "." . $now, "w");
    fwrite($fd, sprintf("%-20s %-20s %-20s\n", "Location", "Rack", "Num Assets in this Rack"));
    foreach ($racksNF as $rackName => $o) {
        fwrite($fd, sprintf("%-20s %-20s %20d\n", $o->locationName, $rackName, $o->numAssets));
    }
    fclose($fd);

    $fd = fopen($config->logDir . "/" . $config->assetsDecommedFileName . "." . $now, "w");
    fwrite($fd, sprintf("%-20s %-20s %-40s %-25s %-25s\n", "Location", "Rack", "Name", "Serial Num", "Asset Num"));
    foreach ($assetsDecommed as $assetName => $o) {
        /** @var CMDBCI $o */
        fwrite($fd, sprintf("%-20s %-20s %-40s %-25s %-25s\n", $o->getLocation(), $o->getRack(), $assetName, $o->getSerialNumber(), $o->getAssetTag()));
    }
    fclose($fd);


    // write the summary to the end of the log file and close it
    outlog(generateSummary());
    fclose($logFilePtr);
} catch (Exception $e) {
    global $options, $logString, $config, $title;

    $emailTo   = $config->adminEmail;
    $emailFrom = $config->adminEmail;
    $emailSubj = "ACDC: {$title} Error Report";

    $headers = implode("\r\n", array(
        "MIME-Version: 1.0",
        "Content-type: text/html; charset=us-ascii",
        "From: {$emailFrom}",
        "Reply-To: {$emailFrom}",
        "X-Priority: 1",
        "X-MSMail-Priority: High",
        "X-Mailer: PHP/" . phpversion()
    ));

    $traceBack = "returnCode: 1\n" .
        "errorCode:  {$e->getCode()}\n" .
        "errorText:  {$e->getMessage()}\n" .
        "errorFile:  {$e->getFile()}\n" .
        "errorLine:  {$e->getLine()}\n" .
        "errorStack: {$e->getTraceAsString()}\n";

    outlog("{$traceBack}\n");

    if (isset($summary)) {
        outlog(generateSummary());
    }

    if (!$options->stdOut) {
        $emailBody = "<pre style='font-size:6pt;'>\n" .
            "{$logString}\n" .
            "</pre>\n";
        mail($emailTo, $emailSubj, $emailBody, $headers);
    }
    exit;
}


function parseOptions()
{
    // command line opts
    $opts = getopt('husrlt:c:w:n:');

    // usage if -h
    if ($opts && array_key_exists('h', $opts)) {
        usage();
    }

    // define options
    $options = (object)array(
        "stdOut"       => array_key_exists('s', $opts) ? true : false,
        "update"       => array_key_exists('u', $opts) ? false : true,
        "forceRun"     => array_key_exists('r', $opts) ? true : false,
        "useLocal"     => array_key_exists('l', $opts) ? true : false,
        "targetHost"   => array_key_exists('t', $opts) ? strtolower($opts['t']) : false,
        "cabinetName"  => array_key_exists('c', $opts) ? $opts['c'] : false,
        "locationName" => array_key_exists('w', $opts) ? $opts['w'] : false,
        "lineNumber"   => array_key_exists('n', $opts) ? $opts['n'] : false
    );

    return $options;
}

function usage()
{
    print "Usage: import_from_dci [-hsulr][-t target_host][-c cabinet][-w location][-n line_number]\n";
    print "\n";
    print "       -h           this help\n";
    print "       -u           no updates, just show actions\n";
    print "       -s           outlog to STDOUT in real time\n";
    print "       -l           use local files\n";
    print "       -r           force run even if runCronJobs is false\n";
    print "       -t host      target host; only run against this host\n";
    print "       -c cabinet   process all hosts within the named cabinet\n";
    print "       -w location  process all hosts in the named location\n";
    print "       -n lineNum   start at line number lineNum\n";
    exit;
}

function generateSummary()
{
    global $startTime, $summary, $summaryNameWidth;

    // calc elapsed time
    $endTime       = time();
    $elapsedSecs   = $endTime - $startTime;
    $elapsedFormat = sprintf("%02d:%02d", floor($elapsedSecs / 60), $elapsedSecs % 60);

    return sprintf("\n\nSummary\n%'-60s\n", "") .

    sumOutput("DCI Hosts", $summary->numDciHosts) .

    sumOutput("DCI Location Missing", $summary->missingLoc, $summary->numDciHosts) .
    sumOutput("DCI Rack Missing", $summary->missingRack, $summary->numDciHosts) .
    sumOutput("DCI Elevation Missing", $summary->missingElev, $summary->numDciHosts) .
    sumOutput("DCI RUs Missing", $summary->missingRUs, $summary->numDciHosts) .
    "\n" .
    sumOutput("CMDB Found", $summary->numFound, $summary->numDciHosts) .
    sumOutput("CMDB Not Found", $summary->numNotFound, $summary->numDciHosts) .
    sumOutput("CMDB Multiple", $summary->numMultiple, $summary->numDciHosts) .
    sumOutput("CMDB Loc Not Found", $summary->locNotFound, $summary->numDciHosts) .
    sumOutput("CMDB Rack Not Found", $summary->rackNotFound, $summary->numDciHosts) .
    "\n" .
    sumOutput("CMDB Locations Updated", $summary->locUpdated, $summary->numDciHosts) .
    sumOutput("CMDB Racks Updated", $summary->rackUpdated, $summary->numDciHosts) .
    sumOutput("CMDB Elevations Updated", $summary->elevationUpdated, $summary->numDciHosts) .
    sumOutput("CMDB RUs Updated", $summary->rackUnitsUpdated, $summary->numDciHosts) .
    "\n" .
    sumOutput("CMDB Blades Updated", $summary->bladesUpdated) .
    "\n" .
    sprintf("%-{$summaryNameWidth}s: %s\n", "Start Time", date("Y-m-d H:i:s", $startTime)) .
    sprintf("%-{$summaryNameWidth}s: %s\n", "End Time", date("Y-m-d H:i:s", $endTime)) .
    sprintf("%-{$summaryNameWidth}s: %s\n", "Elapsed Time", $elapsedFormat) .
    "Synchronization Complete\n";
}

function sumOutput($title, $count, $total = null)
{
    global $summaryNameWidth;

    if ($total) {
        return sprintf("%-{$summaryNameWidth}s: %5d (%4.1f%%)\n", $title, $count, round($count / $total * 100, 1));
    } else {
        return sprintf("%-{$summaryNameWidth}s: %5d\n", $title, $count);
    }
}

function outlog($logMsg)
{
    global $options, $logFilePtr, $logString;

    if ($options->stdOut) {
        print $logMsg;
    }
    fwrite($logFilePtr, $logMsg);
    $logString .= $logMsg;
}

/** @var $e Exception */
function printException($e)
{
    outlog("\n");
    outlog(sprintf("%-12s => %s\n", "returnCode", 1));
    outlog(sprintf("%-12s => %s\n", "errorCode", $e->getCode()));
    outlog(sprintf("%-12s => %s\n", "errorText", $e->getMessage()));
    outlog(sprintf("%-12s => %s\n", "errorFile", $e->getFile()));
    outlog(sprintf("%-12s => %s\n", "errorLine", $e->getLine()));
    outlog(sprintf("%-12s => \n%s\n", "errorStack", $e->getTraceAsString()));
    exit;
}

?>